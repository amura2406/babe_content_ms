FORMAT: 1A
HOST: http://localhost:9000/content/v1

# BABE Content Microservice

Content Microservice main goal is to provide fast and reliable content access.
 
It should encapsulates all underlying storage & cache and provide convenient interface for content client.

# Group Article

## Article Retrieval [/art/{artId}]

+ Parameters
    + artId (number, required) - Article ID

### Get Article's Metadata [GET /art/{artId}/metadata]

Get all article's metadata including publisher, source, categories and entities of an article.

Steps to retrieve data are as follow:

1. Find the metadata (protobuf model) on multiple redis key (MGET) :
    1. `x-art-meta:{artId}` => object serialized as binary using Protobuf containing:
    
                pub (object)
                    * uint32 id
                    * string name
                src: (object)
                    * uint32 id
                    * string name
                    
    2. `x-art-cats:{artId}` => object serialized as binary using Protobuf containing:
                
                repeated cat (object)
                    * uint32 id
                    * string name
                    
    3. `x-art-entities:{artId}` => object serialized as binary using Protobuf containing:
    
                repeated entities (object)
                    * string ent
                    * uint32 occ                
2. If not found or only partial found then get all the data from database (`sasha_article`, `sasha_source`, `sasha_publisher`, `sasha_article_category`, `sasha_category`, `tbl_article_entities`)
3. Construct the returned message using Protobuf model.
4. Entities should be sorted by highest number of occurrence first.
5. The order of the array should be arranged in such a way the **default category** should always comes first.
6. If data is retrieved from DB then populate on redis keys `x-art-meta:{artId}`, `x-art-cats:{artId}`, `x-art-entities:{artId}`, **TTL to 30 minutes** (configurable), keep the value as `Protobuf`.
7. Return the message.

**NB:**

- If `artId` is not found, simply return **HTTP 404**.
- If `artId` has no entity associated with it, return array of **zero** item.
 
+ Parameters
    + artId (number, required) - Article ID
 
+ Response 200 (application/json)
    + Attributes
        + pub (Publisher, required) - Publisher ID of the article.
        + src (Source, required) - Source ID of the article.
        + cats (array[Category]) - Category Indices of the article.
        + entities (array[ArticleEntity], optional) - Entities object array associated with the article.
    
    + Body
    
            {
              "pub": {
                "id": 3,
                "name": "Detik"
              },
              "src": {
                "id": 9,
                "name": "Detik - Food"
              },
              "cats": [
                {
                  "id": 3,
                  "name": "Terbaru"
                },
                {
                  "id": 101,
                  "name": "DKI Jakarta"
                }
              ],
              "entities": [
                {
                  "ent": "DKI Jakarta",
                  "occ": 12
                },
                {
                  "ent": "Gubernur",
                  "occ": 8
                },
                {
                  "ent": "Pilkada",
                  "occ": 5
                }
              ]
            }

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when `artId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)


### Get Article's Entities [GET /art/{artId}/entities]

Get all article's entities including number of occurrence for each entity as an array.

Steps to retrieve data are as follow:

1. Find the metadata (protobuf model) on redis key `x-art-entities:{artId}`.
2. If not found then get all the data from database (`tbl_article_entities`)
3. Construct the returned message using Protobuf model.
4. Entities should be sorted by highest number of occurrence first.
5. If data is retrieved from DB then populate on redis key `x-art-entities:{artId}`, **TTL to 30 minutes** (configurable), keep the value as `Protobuf`.
6. Return the message.

**NB:**

- If `artId` is not found, simply return **HTTP 404**.
- If `artId` has no entity associated with it, return array of **zero** item.

 
+ Parameters
    + artId (number, required) - Article ID
 
+ Response 200 (application/json)
    + Attributes
        + entities (array[ArticleEntity]) - Entities object array associated with the article.
   
    + Body
    
            {
              "entities": [
                {
                  "ent": "DKI Jakarta",
                  "occ": 12
                },
                {
                  "ent": "Gubernur",
                  "occ": 8
                },
                {
                  "ent": "Pilkada",
                  "occ": 5
                }
              ]
            }

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when `artId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Get Article's Categories [GET /art/{artId}/categories]

Get all article's categories as an array.
    
Steps to retrieve data are as follow:

1. Find the metadata (protobuf model) on redis key `x-art-cats:{artId}`.
2. If not found then get all the data from database (`sasha_category`, `sasha_article_category`)
3. Construct the returned message using Protobuf model.
4. The order of the array should be arranged in such a way the **default category** should always comes first.
5. If data is retrieved from DB then populate on redis key `x-art-cats:{artId}`, **TTL to 30 minutes** (configurable), keep the value as `Protobuf`.
6. Return the message.

**NB:**

- If `artId` is not found, simply return **HTTP 404**.
 
+ Parameters
    + artId (number, required) - Article ID
 
+ Response 200 (application/json)
    + Attributes
        + categories (array[Category]) - Categories associated with the article.
        
    + Body
        
            {
              "cats": [
                {
                  "id": 3,
                  "name": "Terbaru"
                },
                {
                  "id": 101,
                  "name": "DKI Jakarta"
                }
              ]
            }

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
        
+ Response 404 (application/json)
    Return when `artId` is not found
    
    + Attributes (DefaultError404)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)


## Article Alteration [/art/bulk]

### Bulk Article Removal [DELETE]

Remove article by indices supplied from Babe backend system.

The order of removal described below:

1. UPDATE `status` in table `sasha_article` to inactive, `status = -1`
2. DELETE `solr` document based on `article_id_l`
3. DELETE redis key `x-art:{artId}` (Article Detail)
5. DELETE redis key `x-art-likes:{artId}` (Likes for article)
6. DELETE redis key `x-art-dislikes:{artId}` (Dislikes for article) 
7. DELETE member in redis key `x-list:{catName}` (List Category)
8. DELETE redis key `x-pub-rel-art:{artId}` (Article Publisher Related)
9. DELETE member in redis key `x-list-popular:{catId}` (List Popular)
10. DELETE redis key `x-comment:{commentId}` (Comment Detail)
11. DELETE redis key `x-art-comment:{artId}` (List Comment on Article)
12. DELETE redis key `x-art-comment-r:{artId}` (List Comment Report)
13. DELETE redis key `x-art-comment-m:{artId}` (List Comment Mood)

Then return all article indices that are successfully pass all the above process.

+ Request (application/json)
    + Attributes
        + ids: 60001, 60003, 89001, 90400, 99181 (array[number], required) - Article Indides to be deleted.
        
+ Response 200 (application/json)
    + Body
    
            [60001, 89001, 99181]

+ Response 400 (application/json)
    Return when parameters requirement not met correctly
    
    + Attributes (DefaultError400)
    
+ Response 413 (application/json)
    Return when request data is too big (limit configurable)
    
    + Attributes (DefaultError413)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Article Removal by Publisher [DELETE /art/bulk/pub/{pubId}]

Remove all article from specified publisher ID.

Logic of the removal is the same as [bulk article removal](#reference/article/bulk-article-removal)

Return number of article that is successfully removed.

+ Parameters
    + pubId: 87 (string, required) - Publisher ID
    
+ Response 200 (application/json)
    + Attributes
        + count: 11000 (string) - Number of actual deleted article.

+ Response 404 (application/json)
    Return when publisher id is not found
    
    + Attributes (DefaultError404)
    
+ Response 413 (application/json)
    Return when request data is too big (limit configurable)
    
    + Attributes (DefaultError413)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)

### Article Removal by Source [DELETE /art/bulk/src/{srcId}]

Remove all article from specified source ID.

Logic of the removal is the same as [bulk article removal](#reference/article/bulk-article-removal)

Return number of article that is successfully removed.

+ Parameters
    + srcId: 37 (string, required) - Source ID
    
+ Response 200 (application/json)
    + Attributes
        + count: 2400 (string) - Number of actual deleted article.

+ Response 404 (application/json)
    Return when source id is not found
    
    + Attributes (DefaultError404)
    
+ Response 413 (application/json)
    Return when request data is too big (limit configurable)
    
    + Attributes (DefaultError413)
        
+ Response 503 (application/json)
    Return when server has internal error and can't continue fulfilling the request

    + Attributes (DefaultError503)





# Data Structures

## ArticleEntity (object)
+ ent: `DKI Jakarta` (string) - Article's entity.
+ occ: `12` (number) - Number of occurence in the article body.

## Category (object)
+ id: `3` (number, required) - Category ID.
+ name: `Terbaru` (string, required) - Category Name.

## Source (object)
+ id: `9` (number, required) - Article source ID.
+ name: `Detik - Food` (string, required) - Article source name.

## Publisher (object)
+ id: `5` (number, required) - Article publisher ID.
+ name: `Detik` (string, required) - Article publisher name.

## Error (object)
+ errCode (number) - Error Code
+ errMsg (string) - Error Message

## DefaultError400 (Error)
+ errCode: `-1`
+ errMsg: Invalid Request

## DefaultError401 (Error)
+ errCode: `-2`
+ errMsg: Authorization needed to access resource

## DefaultError404 (Error)
+ errCode: `-5`
+ errMsg: Resource not found

## DefaultError413 (Error)
+ errCode: `-14`
+ errMsg: Request Entity Too Large

## DefaultError503 (Error)
+ errCode: `-10`
+ errMsg: Backend service is down